@startuml

hide empty members

interface ITradeDataProvider {
    + List<string> GetTradeData(Stream stream)
}

interface  ITradeParser {
    + List<TradeRecord> Parse(List<string> lines)
}

interface ITradeStorage {
    + void Persist(List<TradeRecord> trades)
}

class TradeDataProvider {
    + List<string> GetTradeData(Stream stream)
}

class TradeParser {
    - float LotSize = 100
    + List<TradeRecord> Parse(List<string> lines)
    - TradeRecord MapTradeDataToTradeRecord(IReadOnlyList<string> fields)
    - bool ValidateTradeData(IReadOnlyList<string> fields, int currentLine)
}

class TradeStorage {
    + void Persist(List<TradeRecord> trades)
}

class TradeProcessor {
    - ITradeParser _tradeParser
    - ITradeStorage _tradeStorage
    - ITradeDataProvider _tradeDataProvider
    + void TradeProcessor(ITradeParser tradeParser, ITradeStorage tradeStorage, ITradeDataProvider tradeDataProvider)
    + void ProcessTrades(Stream stream)
}

class TradeRecord {
    + int Id {get, init}
    + string SourceCurrency {get, init}
    + string DestinationCurrency {get, init}
    + float Lots {get, init}
    + decimal Price {get, init}
}

class Program {
    - void Main()
}

TradeDataProvider ..up|> ITradeDataProvider
TradeParser ..up|> ITradeParser
TradeStorage ..up|> ITradeStorage
TradeProcessor o.. ITradeDataProvider: <<uses>>
TradeProcessor o..> ITradeParser: <<uses>>
TradeProcessor o..> ITradeStorage: <<uses>>
TradeProcessor ..> TradeRecord: <<uses>>
TradeParser ..> TradeRecord: <<creates>>
TradeStorage ..> TradeRecord: <<uses>>
Program ..> TradeProcessor: <<creates>>
Program ..> TradeDataProvider: <<creates>>
Program ..> TradeParser: <<creates>>
Program ..> TradeStorage: <<creates>>
Program ..> TradeRecord: <<uses>>

@enduml
