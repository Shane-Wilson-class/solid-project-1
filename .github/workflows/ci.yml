name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'solid-project-1/solid-project-1.sln'
  PROJECT_PATH: 'solid-project-1/solid-project-1.csproj'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Display .NET version
      run: dotnet --version

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore --verbosity normal

    - name: Run tests
      run: |
        # Check if there are any test projects in the solution
        TEST_PROJECTS=$(dotnet sln ${{ env.SOLUTION_PATH }} list | grep -i test || true)
        if [ -n "$TEST_PROJECTS" ]; then
          echo "Test projects found:"
          echo "$TEST_PROJECTS"
          echo "Running tests..."
          dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --logger trx --collect:"XPlat Code Coverage" --results-directory ./TestResults
        else
          echo "ℹ️ No test projects found in the solution. Skipping test execution."
          echo "💡 Consider adding unit tests to improve code quality and reliability."
          echo "   You can add test projects using: dotnet new xunit -n YourProject.Tests"
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          TestResults/**/*.trx
          TestResults/**/coverage.cobertura.xml
          TestResults/**/coverage.json
        retention-days: 30

    - name: Test Report Summary
      if: always()
      run: |
        if [ -d "TestResults" ]; then
          echo "📊 Test Results Summary:"
          find TestResults -name "*.trx" -exec echo "Found test result file: {}" \;
          echo "Test results have been uploaded as artifacts."
        else
          echo "ℹ️ No test results to summarize (no test projects found)."
        fi

    - name: Publish build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          solid-project-1/bin/Release/
          solid-project-1/obj/Release/
        retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Run code analysis
      run: |
        echo "Running static code analysis..."
        # You can add additional code analysis tools here
        # For example: dotnet format --verify-no-changes --verbosity diagnostic
        dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --verbosity normal

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: always()
    
    steps:
    - name: Check build results
      run: |
        echo "Build and Test Status: ${{ needs.build-and-test.result }}"
        echo "Code Quality Status: ${{ needs.code-quality.result }}"
        
        if [[ "${{ needs.build-and-test.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ All checks passed successfully!"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ Some checks failed. Please review the logs above."
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi

    - name: Update commit status
      if: github.event_name == 'push'
      run: |
        echo "Build completed with status: ${{ env.BUILD_STATUS }}"
        # This step provides clear feedback about the build status
